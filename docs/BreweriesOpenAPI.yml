openapi: 3.2.0
info:
  title: My Breweries API
  description: A simple API for managing brewery data
  version: 1.0.0
servers:
  - url: http://localhost/beer-api
    description: Local server
paths:
  /breweries:
    get:
      summary: Get all breweries
      description: Retrieve a list of all the breweries
      parameters:
        - name: brewery_id
          in: query
          description: Filter by exact brewery ID
          schema:
            type: integer
        - name: name
          in: query
          description: Filter by brewery name (partial match)
          schema:
            type: string
        - name: brewery_type
          in: query
          description: Filter by type (e.g., Craft, Microbrewery)
          schema:
            type: string
        - name: city
          in: query
          description: Filter by city
          schema:
            type: string
        - name: state
          in: query
          description: Filter by state or province
          schema:
            type: string
        - name: country
          in: query
          description: Filter by country
          schema:
            type: string
        - name: website_url
          in: query
          description: Filter by website URL
          schema:
            type: string
            format: uri
        - name: founded_year
          in: query
          description: Filter by founding year
          schema:
            type: integer
        - name: owner_name
          in: query
          description: Filter by owner name
          schema:
            type: string
        - name: rating_avg
          in: query
          description: Filter by minimum average rating
          schema:
            type: number
            format: float
        - name: employee_count
          in: query
          description: Filter by minimum employee count
          schema:
            type: integer
      responses:
        "200":
          description: A list of breweries that match the filters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Brewery"
              examples:
                filtered:
                  summary: Filter by city and type
                  value:
                    - brewery_id: 1
                      name: "Unibroue"
                      brewery_type: "Craft"
                      city: "Montreal"
                      state: "Quebec"
                      country: "Canada"
                      website_url: "https://www.unibroue.com"
                      founded_year: 1992
                      owner_name: "Matt Phillips"
                      rating_avg: 4.6
                      employee_count: 250
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /breweries/{brewery_id}:
    get:
      summary: Get all breweries by ID
      description: Retrieve a single brewery using its unique ID.
      parameters:
        - name: brewery_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Brewery found
        '404':
          description: Brewery not found
components:
  schemas:
    
    Brewery:
      type: object
      required:
        - brewery_id
        - name
        - brewery_type
        - city
        - state
        - country
        - website_url
        - founded_year
        - owner_name
        - rating_avg
        - employee_count
      properties:
        brewery_id:
          type: integer
          example: 1
        name:
          type: string
          example: "Unibroue"
        brewery_type:
          type: string
          example: "Craft"
        city:
          type: string
          example: "Montreal"
        state:
          type: string
          example: "Quebec"
        country:
          type: string
          example: "Canada"
        website_url:
          type: string
          format: uri
          example: "https://www.unibroue.com"
        founded_year:
          type: integer
          example: 1992
        owner_name:
          type: string
          example: "Matt Phillips"
        rating_avg:
          type: number
          format: float
          example: 4.6
        employee_count:
          type: integer
          example: 250
  responses:
    BadRequest:
      description: Invalid query parameter or malformed request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            invalidParam:
              value:
                error: "Invalid 'founded_year' parameter"
                details: "Expected integer, got '199a'"
    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            missing:
              value:
                error: "Brewery not found"
                details: "No brewery with id=999"
    ServerError:
      description: Unexpected server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            default:
              value:
                error: "Internal server error"
                details: "Trace id: 8f1e2c6d"
