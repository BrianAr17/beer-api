openapi: 3.0.3

info:
  title: Beers API — Breweries (Read-Only)
  description: >
    Service Description:
    Read-only contract for the `/breweries` resource in the Beers API.
    Provides list and detail retrieval with basic filtering and pagination.
    Target OpenAPI version: 3.0+.
  version: 1.0.0
  contact:
    name: Beers API Team
    email: beersApi@breweryCAN.com

servers:
  - url: http://localhost/beer-api/breweries
    description: Production
  - url: http://localhost:8080/v1
    description: Local

paths:
  /breweries:
    get:
      summary: List breweries
      description: Returns a paginated list of breweries. Supports search/filter/sort and sparse fieldsets.
      operationId: listBreweries
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FieldsParam'
        - name: q
          in: query
          description: Case-insensitive search across brewery name.
          required: false
          schema: { type: string, minLength: 1 }
          example: stone
        - name: city
          in: query
          description: Filter by city (exact).
          required: false
          schema: { type: string }
          example: Montreal
        - name: state
          in: query
          description: Filter by state/province code or name.
          required: false
          schema: { type: string }
          example: QC
        - name: country
          in: query
          description: Filter by country (ISO 3166-1 alpha-2 or name).
          required: false
          schema: { type: string }
          example: CA
        - name: type
          in: query
          description: Filter by brewery type.
          required: false
          schema: { $ref: '#/components/schemas/BreweryType' }
          example: micro
      responses:
        '200':
          description: OK — list returned
          headers:
            X-Total-Count:
              description: Total items matching filters.
              schema: { type: integer, minimum: 0 }
          content:
            application/json:
              schema:
                type: object
                required: [data, meta]
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Brewery' }
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
              examples:
                sample:
                  value:
                    data:
                      - id: "b9e8c9f2-5d5c-4c4c-9a3c-0b1a9c120001"
                        name: "Stone River Brewing Co."
                        type: "micro"
                        websiteUrl: "https://stoneriver.example"
                        phone: "+1-514-555-1223"
                        address:
                          street: "123 Rue des Bières"
                          city: "Montreal"
                          state: "QC"
                          postalCode: "H1A 2B3"
                          country: "CA"
                        createdAt: "2025-10-01T12:34:56Z"
                        updatedAt: "2025-10-10T09:01:02Z"
                      - id: "b9e8c9f2-5d5c-4c4c-9a3c-0b1a9c120002"
                        name: "Polar Hop Works"
                        type: "regional"
                        address:
                          city: "Laval"
                          state: "QC"
                          country: "CA"
                        createdAt: "2025-08-21T08:00:00Z"
                        updatedAt: "2025-09-05T15:30:00Z"
                    meta:
                      page: 1
                      perPage: 10
                      total: 42
                      totalPages: 5
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /breweries/{breweryId}:
    get:
      summary: Get a brewery by ID
      description: Retrieve a single brewery by its identifier.
      operationId: getBrewery
      parameters:
        - $ref: '#/components/parameters/BreweryId'
        - $ref: '#/components/parameters/FieldsParam'
      responses:
        '200':
          description: OK — resource found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Brewery' }
              examples:
                example:
                  value:
                    id: "b9e8c9f2-5d5c-4c4c-9a3c-0b1a9c120001"
                    name: "Stone River Brewing Co."
                    type: "micro"
                    websiteUrl: "https://stoneriver.example"
                    phone: "+1-514-555-1223"
                    address:
                      street: "123 Rue des Bières"
                      city: "Montreal"
                      state: "QC"
                      postalCode: "H1A 2B3"
                      country: "CA"
                    createdAt: "2025-10-01T12:34:56Z"
                    updatedAt: "2025-10-10T09:01:02Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  parameters:
    BreweryId:
      name: breweryId
      in: path
      required: true
      description: Brewery identifier (UUID).
      schema: { type: string, format: uuid }
      example: "b9e8c9f2-5d5c-4c4c-9a3c-0b1a9c120001"

    PageParam:
      name: page
      in: query
      description: 1-based page index.
      required: false
      schema: { type: integer, minimum: 1, default: 1 }

    PerPageParam:
      name: per_page
      in: query
      description: Page size (max 100).
      required: false
      schema: { type: integer, minimum: 1, maximum: 100, default: 10 }

    SortParam:
      name: sort
      in: query
      description: Comma-separated fields; prefix with '-' for DESC (e.g., `name,-createdAt`).
      required: false
      schema: { type: string }

    FieldsParam:
      name: fields
      in: query
      description: Comma-separated list of fields to include (sparse fieldsets).
      required: false
      schema: { type: string }
      example: "id,name,type,address.city,address.country"

  responses:
    BadRequest:
      description: Bad Request — invalid parameter(s)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            invalidParam:
              value:
                status: 400
                code: "INVALID_QUERY"
                title: "Invalid query parameter"
                detail: "Parameter 'per_page' must be between 1 and 100."
    NotFound:
      description: Not Found — resource does not exist
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            missing:
              value:
                status: 404
                code: "BREWERY_NOT_FOUND"
                title: "Brewery not found"
                detail: "No brewery with id 'b9e8c9f2-5d5c-4c4c-9a3c-0b1a9c120099'."
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            generic:
              value:
                status: 500
                code: "INTERNAL_ERROR"
                title: "Unexpected error"
                detail: "Something went wrong. Try again later."

  schemas:
    BreweryType:
      type: string
      description: Brewery category
      enum: [micro, nano, regional, brewpub, large, contract, proprietor, closed]

    Address:
      type: object
      description: Brewery address.
      required: [city, country]
      properties:
        street: { type: string, example: "123 Rue des Bières" }
        city: { type: string, example: "Montreal" }
        state: { type: string, example: "QC", description: "State/Province/Region" }
        postalCode: { type: string, example: "H1A 2B3" }
        country: { type: string, example: "CA", description: "ISO 3166-1 alpha-2 or country name" }

    Brewery:
      type: object
      description: Brewery resource
      required: [id, name, type, address, createdAt, updatedAt]
      properties:
        id: { type: string, format: uuid, example: "b9e8c9f2-5d5c-4c4c-9a3c-0b1a9c120001" }
        name: { type: string, minLength: 2, example: "Stone River Brewing Co." }
        type: { $ref: '#/components/schemas/BreweryType' }
        websiteUrl: { type: string, format: uri, nullable: true, example: "https://stoneriver.example" }
        phone: { type: string, nullable: true, example: "+1-514-555-1223" }
        address: { $ref: '#/components/schemas/Address' }
        createdAt: { type: string, format: date-time, example: "2025-10-01T12:34:56Z" }
        updatedAt: { type: string, format: date-time, example: "2025-10-10T09:01:02Z" }

    PaginationMeta:
      type: object
      required: [page, perPage, total, totalPages]
      properties:
        page: { type: integer, example: 1, minimum: 1 }
        perPage: { type: integer, example: 10, minimum: 1 }
        total: { type: integer, example: 42, minimum: 0 }
        totalPages: { type: integer, example: 5, minimum: 0 }

    Error:
      type: object
      description: Error response (problem detail style).
      required: [status, title]
      properties:
        status: { type: integer, example: 400 }
        code: { type: string, example: "INVALID_QUERY" }
        title: { type: string, example: "Invalid query parameter" }
        detail: { type: string, example: "Parameter 'per_page' must be between 1 and 100." }
